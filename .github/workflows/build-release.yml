name: Build & Release Traefik Consul Registrator

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (override auto-generated version)'
        required: false
        type: string
      release_notes:
        description: 'Release notes'
        required: false
        type: string
        default: 'New release of Traefik Consul Registrator'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      status: ${{ job.status }}
      version: ${{ steps.set_version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set version
        id: set_version
        run: |
          # Get current date in YYYY-MM-DD format
          DATE=$(date +'%Y-%m-%d')
          
          # Get short git commit hash
          GIT_SHORT=$(git rev-parse --short HEAD)
          
          # Use provided version or generate one based on date and git commit
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${DATE}-${GIT_SHORT}"
          fi
          
          echo "Generated version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          
      - name: Generate go.sum
        run: |
          # Ensure go.sum is properly generated
          go mod tidy
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/traefik-consul-registrator:${{ steps.set_version.outputs.version }}
            ghcr.io/${{ github.repository_owner }}/traefik-consul-registrator:latest

  release:
    needs: build
    if: success()
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read
    outputs:
      status: ${{ job.status }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set Release Date and Time
        id: release_date
        run: |
          echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
          echo "datetime=$(date +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT
            
      - name: Get commit info
        id: commit_info
        run: |
          SHORT_SHA="${GITHUB_SHA::7}"
          echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT

      - name: Create Release with Assets
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.build.outputs.version }}
          name: Traefik Consul Registrator Docker Image Latest
          body: |
            # Traefik Consul Registrator Docker Image Latest

            Date: ${{ steps.release_date.outputs.datetime }}

            ## Docker Image Details

            - Image Name: traefik-consul-registrator:latest
            - Version: ${{ needs.build.outputs.version }}
            - Commit: ${{ steps.commit_info.outputs.short_sha }}

            ## About This Release

            This release contains the Traefik Consul Registrator application that automatically registers 
            Traefik-exposed Docker containers in Consul with the correct external IP address.

            ### Features:
            - Automatically registers services in Consul with the correct external host IP
            - Uses reliable host IP detection with UDP connection to 8.8.8.8
            - Adds domain information from Traefik labels as metadata in Consul
            - Configurable via environment variables

            ## How to Use

            ### Pull the Docker image:
            ```bash
            # Pull the image from GitHub Container Registry:
            docker pull ghcr.io/${{ github.repository_owner }}/traefik-consul-registrator:latest
            # Or use a specific version:
            docker pull ghcr.io/${{ github.repository_owner }}/traefik-consul-registrator:${{ needs.build.outputs.version }}
            ```

            ### Run the container with Docker:
            ```bash
            docker run -d --name traefik-consul-registrator \
              -v /var/run/docker.sock:/var/run/docker.sock \
              --network=host \
              ghcr.io/${{ github.repository_owner }}/traefik-consul-registrator:${{ needs.build.outputs.version }} \
              --consul-api=http://localhost:8500
            ```

            ### Run with Docker Compose:
            See the `compose.yml` file in the repository for an example setup.

            For more options and configurations, please refer to the [documentation](https://github.com/${{ github.repository }}).
          draft: false
          prerelease: false
      


  notify:
    needs: [build, release]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Prepare notification message
        id: notification
        run: |
          if [[ "${{ needs.build.outputs.status }}" == "success" && "${{ needs.release.outputs.status }}" == "success" ]]; then
            echo "STATUS=success" >> $GITHUB_OUTPUT
            echo "MESSAGE=🎉 Traefik Consul Registrator v${{ needs.build.outputs.version }} successfully built and released!" >> $GITHUB_OUTPUT
          else
            echo "STATUS=failure" >> $GITHUB_OUTPUT
            echo "MESSAGE=❌ Traefik Consul Registrator v${{ needs.build.outputs.version }} build or release failed" >> $GITHUB_OUTPUT
          fi

      - name: Send Discord notification
        if: env.DISCORD_WEBHOOK_URL != ''
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          # Prepare Discord payload
          STATUS="${{ steps.notification.outputs.STATUS }}"
          MESSAGE="${{ steps.notification.outputs.MESSAGE }}"
          # Discord uses decimal color codes, converting common colors
          COLOR=$([[ "$STATUS" == "success" ]] && echo "65280" || echo "16711680") # Green or Red
          
          # Create release URL
          RELEASE_URL="https://github.com/${{ github.repository }}/releases/tag/v${{ needs.build.outputs.version }}"
          
          # Discord webhook payload
          curl -X POST \
            -H "Content-Type: application/json" \
            -d "{
              \"embeds\": [
                {
                  \"title\": \"Traefik Consul Registrator Release $([[ \"$STATUS\" == \"success\" ]] && echo \"Successful\" || echo \"Failed\")\",
                  \"description\": \"$MESSAGE\",
                  \"color\": $COLOR,
                  \"url\": \"$RELEASE_URL\",
                  \"fields\": [
                    {
                      \"name\": \"Version\",
                      \"value\": \"v${{ needs.build.outputs.version }}\",
                      \"inline\": true
                    },
                    {
                      \"name\": \"Author\",
                      \"value\": \"${{ github.actor }}\",
                      \"inline\": true
                    }
                  ]
                }
              ]
            }" \
            ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Get commit info
        id: commit_info
        uses: actions/checkout@v3
        if: env.DISCORD_WEBHOOK_URL != ''
        with:
          fetch-depth: 1
          
      - name: Get commit message
        id: commit_message
        if: env.DISCORD_WEBHOOK_URL != ''
        run: |
          COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          echo "message=$COMMIT_MSG" >> $GITHUB_OUTPUT

      - name: Send Discord notification
        if: env.DISCORD_WEBHOOK_URL != ''
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          # Prepare Discord payload
          STATUS="${{ steps.notification.outputs.STATUS }}"
          VERSION="${{ needs.build.outputs.version }}"
          ACTOR="${{ github.actor }}"
          REPO="${{ github.repository }}"
          BRANCH="${GITHUB_REF##*/}"
          COMMIT_MSG="${{ steps.commit_message.outputs.message }}"
          REPO_NAME="${REPO##*/}"
          COLOR=$([[ "$STATUS" == "success" ]] && echo "5025616" || echo "16711680")
          
          # Create a temporary JSON file for the payload
          cat > /tmp/discord-payload.json << EOL
          {
            "content": "$([[ "$STATUS" == "success" ]] && echo "🎉 Awesome! Deployment Succeeded 🚀" || echo "❌ Deployment Failed")",
            "embeds": [{
              "title": "🐳 Docker Image $([[ "$STATUS" == "success" ]] && echo "Built Successfully! 🚀" || echo "Build Failed")",
              "description": "Author: $ACTOR\nBranch: $BRANCH\nVersion: $VERSION\nMessage: $COMMIT_MSG\n\n**Docker Image:**\nghcr.io/$REPO:$VERSION\nghcr.io/$REPO:latest\n\n**Pull Command:**\n\`\`\`\ndocker pull ghcr.io/$REPO:latest\n\`\`\`\n\n**GitHub Release:**\nhttps://github.com/$REPO/releases/tag/v$VERSION",
              "color": $COLOR
            }]
          }
          EOL
          
          # Send the notification
          curl -X POST "$DISCORD_WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -d @/tmp/discord-payload.json
